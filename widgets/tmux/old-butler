#!/usr/bin/env bash

# PASTER="${PASTER:-$DEFAULTPASTER}"
# VIEWER="${VIEWER:-$DEFAULTVIEWER}"

# # Override example: cd $(dirname `which tmux-butler`); READER="scripts/capture_panes | scripts/quetty -ip" tmux-butler
# READER="${READER:-$DEFAULTREADER}"
# FILTER="${FILTER:-$DEFAULTFILTER}"
# SELECTOR="${SELECTOR:-$DEFAULTSELECTOR}"

# NOTE: save for reference...
# load defaults that are not already set
# source $CWD/.butlerrc-defaults
# # Saves the relevant environment variables to .env file to be sourced later by other scripts/stages
# save-environment() {
# for envVar in PASTER VIEWER READER FILTER SELECTOR BUTLERTMPDIR QUETTYFZF_START FZFHEADER FZFBINDING; do
#   echo "$envVar=\"${!envVar}\""
# done
# } > $CWD/.env
# rcfile=$HOME/.butlerrc
# if [[ -f "$rcfile" ]]; then
#   source $rcfile
# fi


CWD="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
export BUTLERTMPDIR="${BUTLERTMPDIR:-/tmp}"
export QUETTYFZF_START="${QUETTYFZF_START:-word}"
DEFAULTPASTER="${DEFAULTPASTER:-$CWD/paste-to-tmux}"
DEFAULTVIEWER="${DEFAULTVIEWER:-$CWD/tmux-split}"
DEFAULTREADER="${DEFAULTREADER:-$CWD/capture_panes}"
DEFAULTSELECTOR="${DEFAULTSELECTOR:-$CWD/quetty-fzf}"
DEFAULTFILTER="${DEFAULTFILTER:-cat}"
FZFHEADER="${FZFHEADER:-} "

PASTER="${PASTER:-$DEFAULTPASTER}"
VIEWER="${VIEWER:-$DEFAULTVIEWER}"
# Override example: cd $(dirname `which tmux-butler`); READER="scripts/capture_panes | scripts/quetty -ip" tmux-butler
READER="${READER:-$DEFAULTREADER}"
FILTER="${FILTER:-$DEFAULTFILTER}"
SELECTOR="${SELECTOR:-$DEFAULTSELECTOR}"

save-environment
#### start execution
outputf="$BUTLERTMPDIR/tmux-butler-outputfile"
stage1f="$BUTLERTMPDIR/tmux-butler-stage1"
stage2fifo="$BUTLERTMPDIR/tmux-butler-stage2-fifo"
stage2f="$BUTLERTMPDIR/tmux-butler-stage2"
selectorcmdf="$BUTLERTMPDIR/tmux-butler-selectorcmdf"
readercmdf="$BUTLERTMPDIR/tmux-butler-readercmdf"
processorcmdf="$BUTLERTMPDIR/tmux-butler-processorcmdf"
pastercmdf="$BUTLERTMPDIR/tmux-butler-pastercmdf"
editorcmdf="$BUTLERTMPDIR/editorf"
editorfifo="$BUTLERTMPDIR/editorfifo"
editorinput="$BUTLERTMPDIR/editorinput"
rm -f $editorcmdf

cleanup() {
  rm -f $outputf $stage1f $stage2fifo $stage2f $selectorcmdf  $readercmdf $processorcmdf $pastercmdf $editorcmdf
}
[[ -z $BUTLERDEBUG ]] && trap 'cleanup' EXIT

### STAGE 1 - Fetch initial contents
cat <<< "$READER > $stage1f" > $readercmdf
sh $readercmdf
if [[ ! -s "$stage1f" ]]; then
  # Empty file. Exit
  exit 0
fi

### STAGE 2 - Let the user pick a selection from the fetched input using a selector ( usually fzf )
rm -f $stage2fifo
# Need a fifo because terminalcmds won't wait for the selector cmd to finish
mkfifo $stage2fifo

cat <<< "cat $stage1f | $SELECTOR  > $stage2fifo" > $selectorcmdf
  $VIEWER $selectorcmdf
cat < $stage2fifo > $stage2f

# Empty file. Exit
[[ ! -s "$stage2f" ]] &&  exit 0

### STAGE3 - Any final processing of the output selected required. Can be passthrough using cat
cat <<< "cat $stage2f | $FILTER | perl -pe 'chomp if eof' > $outputf" > $processorcmdf
sh $processorcmdf
if [[ $? -eq 1 ]] || [[ ! -s "$outputf" ]]; then
  rm $outputf
  exit 0
fi

if [[ -f "$editorcmdf" ]]; then
  cp $outputf $editorinput
  rm -f $editorfifo
  mkfifo $editorfifo
  cat <<< "vim $editorinput; cat $editorinput > $editorfifo" > $editorcmdf
  $VIEWER $editorcmdf
  cat < $editorfifo | perl -pe 'chomp if eof' > $outputf
fi

cat $outputf >> $CWD/.history
echo >> $CWD/.history

### STAGE 4 - paste the output into tmux/clipboard
cat <<< "cat $outputf | $PASTER" > $pastercmdf
sh $pastercmdf
exit 0
