#!/bin/bash

# git grep <regexp> $(git rev-list --all)
# git rev-list --all | xargs git grep <expression> will work if you run into an "Argument list too long" error.
#
# If you want to limit the search to some subtree (for instance, "lib/util"), you will need to pass that to the rev-list subcommand and grep as well:
# git grep <regexp> $(git rev-list --all -- lib/util) -- lib/util

# This will grep through all your commit text for regexp.
# The reason for passing the path in both commands is because rev-list will return the revisions list where all the changes to lib/util happened, but also you need to pass to grep so that it will only search in lib/util.
# Just imagine the following scenario: grep might find the same <regexp> on other files which are contained in the same revision returned by rev-list (even if there was no change to that file on that revision).
# Here are some other useful ways of searching your source:

# Search working tree for text matching regular expression regexp:
# git grep <regexp>

# Search working tree for lines of text matching regular expression regexp1 or regexp2:
# git grep -e <regexp1> [--or] -e <regexp2>

# Search working tree for lines of text matching regular expression regexp1 and regexp2, reporting file paths only:
# git grep -l -e <regexp1> --and -e <regexp2>

# Search working tree for files that have lines of text matching regular expression regexp1 and lines of text matching regular expression regexp2:
# git grep -l --all-match -e <regexp1> -e <regexp2>

# Search working tree for changed lines of text matching pattern:
# git diff --unified=0 | grep <pattern>

# Search all revisions for text matching regular expression regexp:
# git grep <regexp> $(git rev-list --all)

# Search all revisions between rev1 and rev2 for text matching regular expression regexp:
# git grep <regexp> $(git rev-list <rev1>..<rev2>)

#-----------------------------------------------------------
# You should use the pickaxe (-S) option of git log.
#
# To search for Foo:
# git log -SFoo -- path_containing_change
# git log -SFoo --since=2009.1.1 --until=2010.1.1 -- path_containing_change
# See Git history - find lost line by keyword for more.
#
# As Jakub Narƒôbski commented:
# this looks for differences that introduce or remove an instance of <string>. It usually means "revisions where you added or removed line with 'Foo'".
# the --pickaxe-regex option allows you to use extended POSIX regex instead of searching for a string. Example (from git log): git log -S"frotz\(nitfol" --pickaxe-regex
#
# Executing a git log -G<regexp> --branches --all (the -G is same as -S but for regexes) does same thing as the accepted one (git grep <regexp> $(git rev-list --all)), but it soooo much faster!
#
# The accepted answer was still searching for text after ‚âà10 minutes of me running it, whereas this one gives results after ‚âà4 seconds ü§∑‚Äç‚ôÇÔ∏è.
# The output here is more useful as well

#-----------------------------------------------------------
# My favorite way to do it is with git log's -G option (added in version 1.7.4).
# -G<regex>
#        Look for differences whose added or removed line matches the given <regex>.
# There is a subtle difference between the way the -G and -S options determine if a commit matches:
#
# The -S option essentially counts the number of times your search matches in a file before and after a commit. The commit is shown in the log if the before and after counts are different. This will not, for example, show commits where a line matching your search was moved.
# With the -G option, the commit is shown in the log if your search matches any line that was added, removed, or changed.
